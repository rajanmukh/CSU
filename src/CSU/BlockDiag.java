/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CSU;

import GraphicElements.ThickArrow;
import GraphicElements.Line;
import GraphicElements.Rectangle;
import GraphicElements.Text;
import GraphicElements.Connection;
import Utility.Frame.Status;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author rajan
 */
public class BlockDiag extends JPanel {

    final int TEXT = 3, BACKGROUND = 4, TITLE = 5;
    private double xfactor = 1, yfactor = 1;
    //private int rectLabelSize = 9;
    private final Color[] colors;
//    private final int[] rect2subsysIndexMap;//used for subsysIndex to rectangle index translation
    private final String[] names;
    private final String[] finedescword;
    private final String[] errdescword;
    private int offset;
    private int currcenter = 0, prevcenter;
    int[] prevstatus, currstatus;
//    private final int[] scrollPane2subsysIndexMap;

    public void updateStat(int subsysIndex, int status) {
        int rectIndex = 0;//inverseMap(subsysIndex);
        repaint();
    }
//    private int inverseMap(int subsysIndex) {
//        int i;
//        for (i = 0; i < rect2subsysIndexMap.length; i++) {
//            if (subsysIndex == rect2subsysIndexMap[i]) {
//                break;
//            }
//        }
//        return i;
//    }    
    Rectangle[] rectangles;
    Connection[] connections;
    Line[] lines;
    Text[] texts;
    ThickArrow[] thickArrows;
    int totalShiftIndex = 0;

    /**
     * Creates new form NewJPanel
     */
    public BlockDiag() {
        initComponents();
        colors = new Color[6];
        colors[TEXT] = Color.BLACK;
        colors[Status.FINE] = Color.WHITE;
        prevstatus = new int[8];
        currstatus = new int[8];
        for (int i = 0; i < 8; i++) {
            currstatus[i] = Status.ERROR;
        }
//        loadColors();
        //setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        rectangles = new Rectangle[14];
        thickArrows = new ThickArrow[6];
        int index = 0;
        names = new String[]{"", "MAINS", "HV", " MODULATION:", "RF", " TX: RADIATION:"};//0
        finedescword = new String[]{"REMOTE", " ON", " ON", " ON", "ON", "ON"};
        errdescword = new String[]{"LOCAL", " OFF", " OFF", " OFF", " OFF", " OFF"};
        for (int i = 0; i < 6; i++) {
            rectangles[index] = new Rectangle("", 1 + 17 * i, 4, 8, 12);
            rectangles[index].setRounded(false);
            rectangles[index].setTextanchor(Rectangle.LEFT);
            rectangles[index].label.setFonttype(Font.BOLD);
            rectangles[index].label.setfontSize(12);
            index++;
        }
        for (int i = 0; i < 6; i++) {
            rectangles[index] = new Rectangle(names[i], 3 + 17 * i, 9, 12, 12);
            rectangles[index].setFillcolor(Color.WHITE);
            rectangles[index].label.setFonttype(Font.BOLD);
            rectangles[index].label.setfontSize(12);
            //ectangles[index].setTextanchor(Rectangle.LEFT);
            index++;
        }

        for (int i = 0; i < 5; i++) {
            Point gf = rectangles[i].getContactPoint(Rectangle.RIGHT, 0.2);
            thickArrows[i] = new ThickArrow(gf.x + 2, gf.y, 4, 2);
            thickArrows[i].setColor(Color.LIGHT_GRAY);

        }

        //setStatus(0, Status.FINE);
//        setStatus(1, Status.FINE);
        //setStatus(2,Status.ERROR);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(235, 233, 216));
        setPreferredSize(new java.awt.Dimension(0, 0));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

//    public final void loadColors() {
//
//        XMLReadWrite reader = new XMLReadWrite("data/Colors/mainframeColors");
//        String[] tags = new String[]{"Error", "Fine", "Warning", "subsystem Label", "background", "Heading"};
//        for (int i = 0; i < tags.length; i++) {
//            colors[i] = decode(reader.getTextByTag("BlockDiagram" + tags[i].replaceAll(" ", "")));
//        }
//    }
    private Color decode(String s) {
        return (s != null) ? Color.decode(s) : Color.gray;
    }
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        Point mousePoint = evt.getPoint();

        if (SwingUtilities.isLeftMouseButton(evt)) {
            for (int i = 0; i < 3; i++) {
                if (rectangles[i].isContaining(mousePoint)) {
                    break;
                }
            }
        }
    }//GEN-LAST:event_formMouseClicked
//    

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        setBackground(colors[BACKGROUND]);
        Graphics2D g2d = (Graphics2D) g;
        Dimension d = this.getSize();
        this.xfactor = d.width / 50.0;
        this.yfactor = d.height / 34.0;
        int size = (d.width < 2 * d.height) ? d.width : 2 * d.height;
        //rectLabelSize = (int) (size * (13 / 870.0));
        for (int i = 0; i < 12; i++) {
            rectangles[i].update(xfactor, yfactor);
            rectangles[i].draw(g2d);
        }
        for (int i = 0; i < 5; i++) {
            this.thickArrows[i].update(xfactor, yfactor);
            this.thickArrows[i].draw(g2d);
        }

    }

    private void center(int block) {
        prevcenter = currcenter;
        currcenter = block;
        if (prevcenter == currcenter) {
            return;
        }
        if (prevcenter == TxComps.LOCAL_REMOTE) {
            shift(prevcenter - currcenter+1);
        } else {
            shift(prevcenter - currcenter);
        }
    }

    private void shift(int index) {


        int shift = index * 17;//((int)Math.signum(index)*2)
        for (int i = 0; i < 12; i++) {
            rectangles[i].shiftHorizontal(shift);
        }
        for (int i = 0; i < 5; i++) {
            this.thickArrows[i].shiftHorizontal(shift);
        }
    }

    public void setStatus(int comp, int status) {
        switch (status) {
            case Status.FINE:
                rectangles[comp].setFillcolor(Color.GREEN);
                rectangles[comp].settext("OK: : ");
                rectangles[comp + 6].settext(names[comp] + finedescword[comp]);
                break;
            case Status.ERROR:
                rectangles[comp].setFillcolor(Color.RED);
                rectangles[comp].settext("NOT OK: : ");
                rectangles[comp + 6].settext(names[comp] + errdescword[comp]);
                break;
            default:
                ;
        }
        prevstatus[comp] = currstatus[comp];
        currstatus[comp] = status;
        if (currstatus[comp] != prevstatus[comp]) {
            center(comp);
        }
        repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
